# Compatibility between Mingw and Msvc

ocpwin is cross-compiled on Linux using MinGW. Still, we want to be
able to link OCaml libraries using MSVC. For that, we had to change
some things in OCaml, described in this document.

Note that some of these issues might have been solvable just by
linking the resulting executable with libgcc. For now, this solution
has not been chosen, but should be kept in mind.

## Stack Checking

The OS protects only the next page of the stack, to detect the access
that will trigger the allocation of the page. Once it is used, the
next page is protected and so on. However, when a function uses more
than the size of a page, an unprotected access might be performed
after the protected page, leading to a segmentation fault. To avoid
this problem, gcc inserts a call to __chkstk_ms to incrementally
protect the stack pages that are needed by a function.

This function is not available under MSVC, probably because it uses
another mechanism. To avoid the dependency on this function, we
removed all the big stack-allocated data structures. All of them are
buffers, so we provided in memory.h two macros,
OCP_DECLARE_BUFFER(var,size) and OCP_FREE_BUFFER(var). On Windows,
these macros will use malloc and free to manage the buffers, while on
other systems, the structures will be stack-allocated.

## Providing Compiler-Specific Functions

Some functions are compiled differently by MinGW and MSVC, and the
MinGW version is not compatible with MSVC. To solve this problem, we
extended 'flexlink' with an option '-ocaml'. When this option is used,
'flexlink' will link a module called 'flexdll_ocaml_$(SYSTEM).$(O)',
that has been compiled for each compiler.

This module contains the following functions:
* Functions from the wspiapi.h file: ocp_getnameinfo, ocp_freenameinfo, 
   ocp_getaddrinfo.
* For MSVC only, an empty `__main` function, that is called by the `main` 
   function when that main function has been generated by 'gcc'.

### 64-bit version divisions on 32-bit

In 32 bit mode, gcc generates calls to ___divdi3, ___moddi3,
___udivdi3 in byterun/ints.c. These functions are not available in
MSVC runtime.  To solve this issue, we copied some code from
int64_emul.h into int64_native.h, for I64_div and I64_mod, to emulate
these operations (only on Windows in 32 bits).

Some 64-bit divisions are also performed in
otherlibs/bigarray/mmap_win32.c. We solved this problem by using
I64_div and I64_mod instead, which are either native or emulated
versions.

### ocamlmklib

Instead of relying on myocamlbuild_config.ml, ocamlmklib.mlp has been
modified to rely directly on config.mlp.

### unified version of amd64nt.asm/amd64.S and amd64/emit{_nt}.mlp

There was a small difference between mingw64 and mscv64 code generated
by ocamlopt, when calling C functions (caml_c_call). The difference
was removed.
