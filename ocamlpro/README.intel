
The internal assembler 
====================== for Elf(linux) and Coff(windows)

Les fichiers suivants sont nécessaires à la compilation du backend
 assembleur :

INTEL_ASM=\
  driver/intel_proc.cmo \
  driver/intel_gas.cmo \
  driver/intel_masm.cmo \
  \
  driver/intel_assembler.cmo \
  driver/coff.cmo \
  driver/intel_coff.cmo \
  \
  driver/elf.cmo \
  driver/intel_elf.cmo \
  driver/intel_tests.cmo

INTEL_MAIN=driver/intel_main.cmo

Le dernier doit être inclus dans l'exécutable pour être sûr que les
autres fonctionnent.

available: the modules have been linked in the compiler
possible: the Config.system is compatible with one of the internal
  assemblers.

La variable OCAMLASM permet de choisir entre plusieurs modes:
 check: use this option to check whether internal assembly is used
 yes: force use of internal assembly, if available and possible
 no: prevent use of internal assembly, even if available and possible
 diff:
 object:
 assembler:
 v: set verbose mode (Clflags.verbose)
 unit: set unit tests (per instruction tests)
 n
 emit: force disable internal assembler
 symbol: force internal assembler (unless "emit")
 
In emit.mlp, there are both a symbolic (internal) and textual code
emitter. The one selected is based on Config.system.

The symbolic one will first generate a symbolic IR, and then call
Intel_proc.generate_code, while providing Emitaux.output_channel.

The modules:
* Intel_proc: basic types for symbolic assembly and functions
* Intel_gas: printer from symbolic assembly to GNU `as` syntax
* Intel_masm: printer from symbolic assembly to MASM syntax
* Intel_assembler: binary assembler for symbolic assembly
* Coff: the COFF object format
* Intel_coff: from binary assembly to COFF format
* Elf: the ELF object format
* Intel_elf : from binary assembly to ELF format
* Intel_tests : compare code generated by the internal assembler versus
    code generated by GNU as.
* Intel_main : force linking for Intel_coff and Intel_elf
